/**
 * Vulnerability Scanner
 * Detects common security vulnerabilities in code
 */

import { Vulnerability, VulnerabilityType, SeverityLevel } from '../types.js';

export class VulnerabilityScanner {
  private static readonly PATTERNS = {
    // SQL Injection patterns
    sql_injection: [
      {
        pattern: /(?:query|execute|exec)\s*\(\s*[`"'].*?\$\{.*?\}.*?[`"']/gi,
        message: 'SQL Injection vulnerability: Using template literals in SQL queries',
        severity: 'critical' as SeverityLevel,
        cwe: 'CWE-89',
        owasp: 'A03:2021 – Injection'
      },
      {
        pattern: /(?:query|execute|exec)\s*\(\s*[`"'].*?\+.*?[`"']/gi,
        message: 'SQL Injection vulnerability: String concatenation in SQL queries',
        severity: 'critical' as SeverityLevel,
        cwe: 'CWE-89',
        owasp: 'A03:2021 – Injection'
      }
    ],

    // XSS (Cross-Site Scripting) patterns
    xss: [
      {
        pattern: /innerHTML\s*=\s*(?!['"`])/gi,
        message: 'XSS vulnerability: Direct assignment to innerHTML without sanitization',
        severity: 'high' as SeverityLevel,
        cwe: 'CWE-79',
        owasp: 'A03:2021 – Injection'
      },
      {
        pattern: /document\.write\s*\(/gi,
        message: 'XSS vulnerability: Using document.write with dynamic content',
        severity: 'high' as SeverityLevel,
        cwe: 'CWE-79',
        owasp: 'A03:2021 – Injection'
      },
      {
        pattern: /dangerouslySetInnerHTML/gi,
        message: 'XSS risk: Using dangerouslySetInnerHTML without proper sanitization',
        severity: 'high' as SeverityLevel,
        cwe: 'CWE-79',
        owasp: 'A03:2021 – Injection'
      }
    ],

    // Command Injection patterns
    command_injection: [
      {
        pattern: /exec\s*\(\s*[`"'].*?\$\{.*?\}.*?[`"']/gi,
        message: 'Command Injection vulnerability: Using template literals in exec()',
        severity: 'critical' as SeverityLevel,
        cwe: 'CWE-78',
        owasp: 'A03:2021 – Injection'
      },
      {
        pattern: /child_process\.exec\s*\(/gi,
        message: 'Command Injection risk: Using child_process.exec with user input',
        severity: 'high' as SeverityLevel,
        cwe: 'CWE-78',
        owasp: 'A03:2021 – Injection'
      }
    ],

    // Path Traversal patterns
    path_traversal: [
      {
        pattern: /(?:readFile|writeFile|appendFile)\s*\(\s*.*?\+/gi,
        message: 'Path Traversal vulnerability: Unsanitized file path construction',
        severity: 'high' as SeverityLevel,
        cwe: 'CWE-22',
        owasp: 'A01:2021 – Broken Access Control'
      },
      {
        pattern: /\.\.[\/\\]/gi,
        message: 'Path Traversal risk: Directory traversal pattern detected',
        severity: 'medium' as SeverityLevel,
        cwe: 'CWE-22',
        owasp: 'A01:2021 – Broken Access Control'
      }
    ],

    // Insecure Deserialization
    insecure_deserialization: [
      {
        pattern: /eval\s*\(/gi,
        message: 'Insecure Deserialization: Using eval() is extremely dangerous',
        severity: 'critical' as SeverityLevel,
        cwe: 'CWE-502',
        owasp: 'A08:2021 – Software and Data Integrity Failures'
      },
      {
        pattern: /JSON\.parse\s*\(\s*(?!.*try)/gi,
        message: 'Insecure Deserialization: JSON.parse without try-catch',
        severity: 'medium' as SeverityLevel,
        cwe: 'CWE-502',
        owasp: 'A08:2021 – Software and Data Integrity Failures'
      }
    ],

    // Cryptographic Failures
    crypto_failure: [
      {
        pattern: /md5|sha1(?![\d])/gi,
        message: 'Cryptographic Failure: Using weak hashing algorithm (MD5/SHA1)',
        severity: 'high' as SeverityLevel,
        cwe: 'CWE-327',
        owasp: 'A02:2021 – Cryptographic Failures'
      },
      {
        pattern: /Math\.random\(\)/gi,
        message: 'Cryptographic Failure: Math.random() is not cryptographically secure',
        severity: 'medium' as SeverityLevel,
        cwe: 'CWE-338',
        owasp: 'A02:2021 – Cryptographic Failures'
      }
    ],

    // Authentication Failures
    authentication_failure: [
      {
        pattern: /password\s*(?:==|===)\s*['"]/gi,
        message: 'Authentication Failure: Hardcoded password comparison',
        severity: 'critical' as SeverityLevel,
        cwe: 'CWE-798',
        owasp: 'A07:2021 – Identification and Authentication Failures'
      },
      {
        pattern: /session\s*\.\s*regenerate/gi,
        message: 'Authentication: Missing session.regenerate() after login',
        severity: 'medium' as SeverityLevel,
        cwe: 'CWE-384',
        owasp: 'A07:2021 – Identification and Authentication Failures'
      }
    ],

    // Security Misconfiguration
    security_misconfiguration: [
      {
        pattern: /cors\s*\(\s*\{\s*origin\s*:\s*['"`]\*['"`]/gi,
        message: 'Security Misconfiguration: CORS allowing all origins',
        severity: 'high' as SeverityLevel,
        cwe: 'CWE-942',
        owasp: 'A05:2021 – Security Misconfiguration'
      },
      {
        pattern: /helmet\s*\(\s*\)/gi,
        message: 'Security Misconfiguration: Using helmet() without proper configuration',
        severity: 'low' as SeverityLevel,
        cwe: 'CWE-16',
        owasp: 'A05:2021 – Security Misconfiguration'
      }
    ],

    // SSRF (Server-Side Request Forgery)
    ssrf: [
      {
        pattern: /fetch\s*\(\s*[^'"]*\+/gi,
        message: 'SSRF vulnerability: Dynamic URL construction in fetch()',
        severity: 'high' as SeverityLevel,
        cwe: 'CWE-918',
        owasp: 'A10:2021 – Server-Side Request Forgery'
      },
      {
        pattern: /axios\.(?:get|post)\s*\(\s*[^'"]*\$/gi,
        message: 'SSRF vulnerability: User-controlled URL in HTTP request',
        severity: 'high' as SeverityLevel,
        cwe: 'CWE-918',
        owasp: 'A10:2021 – Server-Side Request Forgery'
      }
    ]
  };

  /**
   * Scan code for vulnerabilities
   */
  static async scan(code: string, language: string): Promise<Vulnerability[]> {
    const vulnerabilities: Vulnerability[] = [];
    const lines = code.split('\n');

    // Scan each vulnerability type
    for (const [vulnType, patterns] of Object.entries(this.PATTERNS)) {
      for (const patternDef of patterns) {
        lines.forEach((line, lineIndex) => {
          const matches = line.matchAll(new RegExp(patternDef.pattern.source, patternDef.pattern.flags));
          
          for (const match of matches) {
            if (match.index !== undefined) {
              vulnerabilities.push({
                type: vulnType as VulnerabilityType,
                severity: patternDef.severity,
                line: lineIndex + 1,
                column: match.index,
                message: patternDef.message,
                code: line.trim(),
                cwe: patternDef.cwe,
                owasp: patternDef.owasp,
                recommendation: this.getRecommendation(vulnType as VulnerabilityType)
              });
            }
          }
        });
      }
    }

    return vulnerabilities;
  }

  /**
   * Get security recommendations for vulnerability type
   */
  private static getRecommendation(type: VulnerabilityType): string {
    const recommendations: Record<VulnerabilityType, string> = {
      sql_injection: 'Use parameterized queries or prepared statements. Never concatenate user input into SQL queries.',
      xss: 'Sanitize all user input before rendering. Use Content Security Policy (CSP) headers. Prefer textContent over innerHTML.',
      path_traversal: 'Validate and sanitize file paths. Use path.resolve() and check if the path is within allowed directories.',
      command_injection: 'Avoid exec() with user input. Use child_process.spawn() with argument arrays instead.',
      insecure_deserialization: 'Never use eval(). Validate JSON before parsing. Use safe deserialization libraries.',
      broken_access_control: 'Implement proper authorization checks. Validate user permissions before accessing resources.',
      crypto_failure: 'Use modern cryptographic algorithms (SHA-256, bcrypt for passwords). Use crypto.randomBytes() for randomness.',
      insecure_design: 'Follow security-by-design principles. Implement defense in depth.',
      security_misconfiguration: 'Configure security headers properly. Disable debug mode in production. Keep dependencies updated.',
      authentication_failure: 'Use strong password policies. Implement multi-factor authentication. Never hardcode credentials.',
      data_integrity_failure: 'Implement integrity checks. Use digital signatures. Validate all data sources.',
      logging_failure: 'Log security events properly. Don\'t log sensitive data. Monitor logs regularly.',
      ssrf: 'Validate and whitelist URLs. Use allowlists for external domains. Implement network segmentation.',
      race_condition: 'Use proper locking mechanisms. Implement atomic operations. Avoid time-of-check-to-time-of-use bugs.',
      buffer_overflow: 'Use safe string functions. Validate buffer sizes. Enable stack protection.'
    };

    return recommendations[type] || 'Review code for security best practices.';
  }

  /**
   * Calculate severity score
   */
  static calculateSeverityScore(vulnerabilities: Vulnerability[]): number {
    const weights = {
      critical: 100,
      high: 75,
      medium: 50,
      low: 25,
      info: 10
    };

    let totalPenalty = 0;
    
    for (const vuln of vulnerabilities) {
      totalPenalty += weights[vuln.severity];
    }

    // Score from 0-100, where 100 is perfect
    return Math.max(0, 100 - Math.min(totalPenalty, 100));
  }
}